<f:view xmlns="http://www.w3.org/1999/xhtml"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:h="http://xmlns.jcp.org/jsf/html"
	xmlns:jsf="http://xmlns.jcp.org/jsf"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:ng="http://xmlns.jcp.org/jsf/passthrough"
	xmlns:ac="http://beyondjava.net/angularFacesCore">
	<h:head>
		<style>
.ui-state-error-text {
	color: #cd0a0a;
}

.ui-state-error {
	color: #cd0a0a;
}
</style>
	</h:head>
	<h:body id="angular">
		<h2>Welcome to AngularFaces 2.0!</h2>
    		Based firmly in the future...<br />
		<h:panelGroup colspan="2" header="{{calculatorBean.headerText}}"
			style="{{calculatorBean.gridStyle}}" ng-app="AngularFacesExamples"
			ng-controller="MyCtrl">
			<h:form id="myForm" prependId="false">
				<br />This demo uses the traditional JSF 2.2 components.
				
				<h:panelGrid columns="3">
					<h:inputText value="{{calculatorBean.number1}}" label="number1" ng:integer="" />
					<h:inputText value="{{calculatorBean.number2}}" ng:integer="" />
					<h:inputText value="{{calculatorBean.result}}"
						label="#{calculatorBean.resultCaption}" />
					<h:inputText value="{{calculatorBean.serverSideResult}}" />
					<h:inputText value="{{calculatorBean.randomNumberFromServer}}" />
					<h:commandButton value="Add on server (via JSF-AJAX)"
						action="#{calculatorBean.add}">
						<f:ajax render="@form" execute="@form" />
					</h:commandButton>
				</h:panelGrid>
				Note that AngularJS doesn't recover after traditional AJAX requests. The PrimeFaces version of this JSF view doesn't have that problem.
				<h:messages globalOnly="false" />
			</h:form>
		</h:panelGroup>

	</h:body>
</f:view>
